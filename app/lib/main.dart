import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:uni_links/uni_links.dart';
import 'dart:async';
import 'package:clarify/api/auth_service.dart';
import 'package:clarify/screens/main_screen.dart';
import 'package:clarify/providers/theme_provider.dart';
import 'firebase_options.dart';  // Generated by Firebase CLI

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer(
      builder: (context, ref, child) {
        final theme = ref.watch(themeProvider);
        return MaterialApp(
          title: 'Clarify',
          theme: theme,
          home: const ClarifyApp(),
        );
      },
    );
  }
}

class ClarifyApp extends ConsumerStatefulWidget {
  const ClarifyApp({super.key});

  @override
  _ClarifyAppState createState() => _ClarifyAppState();
}

class _ClarifyAppState extends ConsumerState<ClarifyApp> {
  StreamSubscription? _sub;

  @override
  void initState() {
    super.initState();
    initUniLinks();
  }

  Future<void> initUniLinks() async {
    _sub = uriLinkStream.listen((Uri? uri) {
      if (uri != null && uri.queryParameters.containsKey('token')) {
        String token = uri.queryParameters['token']!;
        String email = uri.queryParameters['email']!;
        navigateToMainScreen(email, token);
      }
    }, onError: (err) {
      print('Error: $err');
    });
  }

  Future<void> navigateToMainScreen(String email, String token) async {
    if (mounted) {
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => MainScreen(email: email, token: token)),
        (Route<dynamic> route) => false,
      );
    }
  }

  @override
  void dispose() {
    _sub?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return const MainScreen();
  }
}
